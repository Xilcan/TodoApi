//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;
using TodoApi.Data;
using TodoApi.Interfaces;
using TodoApi.Models;

namespace TodoApi.Repositories
{
    /// <summary>
    /// Represents a repository for interacting with todo items.
    /// </summary>
    public class TodoRepository : ITodoRepository
    {
        private readonly TodoContext _context;

        /// <summary>
        /// Initializes a new instance of the <see cref="TodoRepository"/> class.
        /// </summary>
        /// <param name="context">The database context.</param>
        public TodoRepository(TodoContext context)
        {
            _context = context;
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<TodoItem>> GetTodoItems()
        {
            return await _context.TodoItems.ToListAsync();
        }

        /// <inheritdoc/>
        public async Task<TodoItem> GetTodoItem(int id)
        {
            return await _context.TodoItems.FindAsync(id);
        }

        /// <inheritdoc/>
        public async Task AddTodoItem(TodoItem todoItem)
        {
            await _context.TodoItems.AddAsync(todoItem);
            await _context.SaveChangesAsync();
        }

        /// <inheritdoc/>
        public async Task UpdateTodoItem(TodoItem todoItem)
        {
            _context.Entry(todoItem).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        /// <inheritdoc/>
        public async Task DeleteTodoItem(int id)
        {
            var todoItem = await _context.TodoItems.FindAsync(id);
            if (todoItem != null)
            {
                _context.TodoItems.Remove(todoItem);
                await _context.SaveChangesAsync();
            }
        }

        /// <inheritdoc/>
        public async Task<bool> TodoItemExists(int id)
        {
            return await _context.TodoItems.AnyAsync(e => e.Id == id);
        }
    }
}
