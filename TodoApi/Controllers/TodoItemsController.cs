//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

namespace TodoApi.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components.Web;
    using Microsoft.AspNetCore.Mvc;
    using TodoApi.Interfaces;
    using TodoApi.Models;

    /// <summary>
    /// Controller for managing tasks.
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public class TodoItemsController : ControllerBase
    {
        private readonly ITodoService todoService;

        /// <summary>
        /// Initializes a new instance of the <see cref="TodoItemsController"/> class.
        /// </summary>
        /// <param name="todoService">The task service.</param>
        public TodoItemsController(ITodoService todoService)
        {
            this.todoService = todoService ?? throw new ArgumentNullException(nameof(todoService));
        }

        /// <summary>
        /// Gets all tasks.
        /// </summary>
        /// <returns>A collection of tasks.</returns>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<TodoItem>>> GetTasks()
        {
            var tasks = await this.todoService.GetTodoItems().ConfigureAwait(false);
            return this.Ok(tasks);
        }

        /// <summary>
        /// Gets a specific task by its ID.
        /// </summary>
        /// <param name="id">The ID of the task.</param>
        /// <returns>The task with the specified ID.</returns>
        [HttpGet("{id}")]
        public async Task<ActionResult<TodoItem>> GetTask(int id)
        {
            var task = await this.todoService.GetTodoItem(id).ConfigureAwait(false);

            if (task == null)
            {
                return this.NotFound();
            }

            return this.Ok(task);
        }

        /// <summary>
        /// Creates a new task.
        /// </summary>
        /// <param name="task">The task to create.</param>
        /// <returns>The newly created task.</returns>
        [HttpPost]
        public async Task<ActionResult<TodoItem>> PostTask(TodoItem task)
        {
            try
            {
                if(!ModelState.IsValid)
                {
                    return this.BadRequest();
                }
                ArgumentNullException.ThrowIfNull(task);
                await this.todoService.AddTodoItem(task).ConfigureAwait(false);
                return this.CreatedAtAction(nameof(this.GetTask), new { id = task.Id }, task);
            }
            catch (ArgumentNullException ex)
            {
                return this.StatusCode(500, new { Message = "An error occurred while adding the task.", Details = ex.Message });
            }
        }

        /// <summary>
        /// Updates an existing task.
        /// </summary>
        /// <param name="id">The ID of the task to update.</param>
        /// <param name="task">The updated task.</param>
        /// <returns>An action result indicating success or failure of the update operation.</returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> PutTask(int id, TodoItem task)
        {
            try
            {
                if (id < 1 || !ModelState.IsValid)
                {
                    return this.BadRequest();
                }
                ArgumentNullException.ThrowIfNull(task);
                if (id != task.Id)
                {
                    return this.BadRequest();
                }

                if (!await this.todoService.TodoItemExists(id).ConfigureAwait(false))
                {
                    return this.NotFound();
                }

                await this.todoService.UpdateTodoItem(task).ConfigureAwait(false);
            }
            catch (ArgumentNullException ex)
            {
                return this.StatusCode(500, new { Message = "An error occurred while updating the task.", Details = ex.Message });
            }
            catch
            {
                return this.StatusCode(500, new { Message = "An error occurred while updating the task."});
            }

            return this.NoContent();
        }

        /// <summary>
        /// Deletes a task.
        /// </summary>
        /// <param name="id">The ID of the task to delete.</param>
        /// <returns>An action result indicating success or failure of the delete operation.</returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteTask(int id)
        {
            var task = await this.todoService.GetTodoItem(id).ConfigureAwait(false);
            if (task == null)
            {
                return this.NotFound();
            }

            await this.todoService.DeleteTodoItem(id).ConfigureAwait(false);
            return this.NoContent();
        }
    }
}